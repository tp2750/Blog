* Spline Experiments
[2021-08-08 søn]

* Purpose

I want to compare R: smooth.spline() and SmoothingSplines.jl 
and possibly from scatch implementation based on wikipedia and 
Elements of statistical Learning (Hastie et al).

The objective is to get out df from lambda and optimize lambda using GCV etc.

* Comparisson

** SmoothingSplines.jl

The example from the README:

#+NAME: SmoothingSpliesn.jl example 1
#+BEGIN_SRC ess-julia
using SmoothingSplines
using RDatasets
using Gadfly

cars = dataset("datasets","cars")
X = map(Float64,convert(Array,cars[:Speed]))
Y = map(Float64,convert(Array,cars[:Dist]))

spl = fit(SmoothingSpline, X, Y, 250.0) # λ=250.0
Ypred = predict(spl) # fitted vector
plot(layer(x=X, y=Y, Geom.point),
	layer(x=X, y=Ypred, Geom.line, 	Theme(default_color=colorant"red")))

predict(spl, 20.0) #prediction at arbitrary point
#+END_SRC

No org-babel-execute for julia.

Looks like the current alternative is through jupyter:
https://github.com/tmurph/jupyter-mode#what-about-r-and-julia


*** OBS
    The test of SmoothingSplines show that in order to compare to lambda in smooth.spline(), X needs to be rescaled to 0..1
    https://github.com/nignatiadis/SmoothingSplines.jl/blob/80001d8eab105487682501b599a25c4da03e1566/test/runtests.jl#L82

*** OBS
    The README of SmoothingSplines does not run in DataFrames :
    ERROR: ArgumentError: syntax df[column] is not supported use df[!, column] instead
* [2021-08-29 søn] 

- https://en.wikipedia.org/wiki/Smoothing_spline
- https://github.com/nignatiadis/SmoothingSplines.jl

#julia
using SmoothingSplines
x = collect(0:.025:1);
julia> dump(AWD(x))
NamedTuple{(:A, :W, :Δ), Tuple{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}}}
  A: Array{Float64}((41, 41)) [102892.48989355112 -233354.93936130672 … -1.0572341828479569e-16 1.7620569714132615e-17; -233354.93936130672 632129.6361678403 … 6.343405097087741e-16 -1.0572341828479568e-16; … ; -1.0572341828479558e-16 6.343405097087735e-16 … 632129.636167839 -233354.93936130617; 1.76205697141326e-17 -1.057234182847956e-16 … -233354.9393613062 102892.48989355087]
  W: Array{Float64}((39, 39)) [0.016666666666666666 0.004166666666666667 … 0.0 0.0; 0.004166666666666667 0.016666666666666666 … 0.0 0.0; … ; 0.0 0.0 … 0.016666666666666646 0.00416666666666667; 0.0 0.0 … 0.00416666666666667 0.01666666666666668]
  Δ: Array{Float64}((39, 41)) [40.0 -80.0 … 0.0 0.0; 0.0 40.0 … 0.0 0.0; … ; 0.0 0.0 … 39.999999999999964 0.0; 0.0 0.0 … -79.99999999999993 39.999999999999964]
julia> (A,W,Δ) = AWD(x)
julia> W
39×39 Matrix{Float64}:
 0.0166667   0.00416667  0.0         0.0         0.0         0.0         …  0.0         0.0         0.0         0.0         0.0         0.0
 0.00416667  0.0166667   0.00416667  0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.00416667  0.0166667   0.00416667  0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.00416667  0.0166667   0.00416667  0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.00416667  0.0166667   0.00416667     0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.00416667  0.0166667   …  0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.00416667     0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0         …  0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0         …  0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0         …  0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0         …  0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0         …  0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.00416667  0.0         0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0166667   0.00416667  0.0         0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.00416667  0.0166667   0.00416667  0.0         0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0         …  0.0         0.00416667  0.0166667   0.00416667  0.0         0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.00416667  0.0166667   0.00416667  0.0
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.00416667  0.0166667   0.00416667
 0.0         0.0         0.0         0.0         0.0         0.0            0.0         0.0         0.0         0.0         0.00416667  0.0166667

julia> 

ss1 = fit(SmoothingSpline, x, y, 0.0002077284);
julia> ss1.RpαQtQ
3×39 Matrix{Float64}:
 0.0       0.0        0.234382   0.311645   0.354306   0.378097   0.390301  …   0.398097   0.398097   0.398097   0.398097   0.398097   0.398097
 0.0      -0.934591  -1.03728   -1.06818   -1.07711   -1.07807   -1.07676      -1.07487   -1.07487   -1.07487   -1.07487   -1.07487   -1.07487
 1.41805   1.06649    0.938074   0.879047   0.851562   0.840042   0.836128      0.834886   0.834886   0.834886   0.834886   0.834886   0.834886

** Analyzing SmoothingSplines
in fit(SmoothingSpline):
RpαQtQ = QtQpR(diff(Xdesign), λ, ws) ## so RpαQtQ depends on \lambda
QtQpR: function QtQpR(h::AbstractVector{T}, α::T, w::AbstractVector{T}=ones(T, length(h)+1)) where T<:Real

** Computing first derivative
https://en.wikipedia.org/wiki/Spline_(mathematics)#General_expression_for_a_C2_interpolating_cubic_spline :
S: interpolating cubic spline with natural conditions:
S_i(x) = z_i(x - t_{i-1})^3/(6h_i) + z_{i-1}(t_{i} - x)^3/(6h_i) + [f(t_i)/h_i - z_ih_i/6](x - t_{i-1}) + [f(t{i_1}/h_i - z_[i-1]h_i/6](t_i - x)
 z_i = f''(t_i): second derivatives
 h_i = (t_i - t_{i-1})
 f(t_i): function value at i'th knot

In my implementation baed on  https://en.wikipedia.org/wiki/Smoothing_spline#Derivation_of_the_cubic_smoothing_spline
we compute:

- Yhat (from sp()): corresponds to f(t_i) above (as the smoothing spline interposlates the eestimated points
- 

Wikipedia links to this: https://data.princeton.edu/eco572/smoothing.pdf (hentet). Den ser god ud.

Hastie et al har udledninge i øvelserne: Ex 5.7 + resten af opgaverne i kap 5
